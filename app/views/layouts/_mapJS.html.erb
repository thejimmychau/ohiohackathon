<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=true"></script> <!-- Map API dependancy -->

<!-- custom map scripts -->
<script>
    document.onload = drop_user_pin();
    
var pins = []; //array of all pins
var googleMap;
var userPos;
var temp;

function drop_user_pin()
{
	//grab position if possible
	if (navigator.geolocation) {
		var optn = {
				enableHighAccuracy : true,
				timeout : Infinity,
				maximumAge : 0
		};
        
	//put position on the map
	navigator.geolocation.getCurrentPosition(show_user_position, showError, optn);
    
	} else {
			alert('Geolocation is not supported in your browser');
	}
}

//find nearby from user lat and lng
function find_nearby_events(latitude,longitude,radius,tag,time_range,address){
	delete_pins();
    var request = "/events/find_nearby_events?latitude="+latitude+"&longitude="+longitude+"&radius="+radius+"&tag="+tag+"&time_range="+time_range+"&address="+address; //access route of interest
    var aj = $.ajax({
        url: request,
        type: 'get',
        data: $(this).serialize()
    }).done(function (data) {
        drop_event_pins(data);
    }).fail(function (data) {
        console.log('Nearby Events: AJAX request has FAILED');
    });
}
    
    function find_similar_events(){
        var request = "/events/similar_events"
        var aj = $.ajax({
            url: request,
            type: 'get',
            data: $(this).serialize()
        }).done(function (data) {
            drop_event_pins(data,"http://i.imgur.com/z2h3rtO.png");
        }).fail(function (data) {
            console.log('Similar Events: AJAX request has FAILED (Are you logged in?)');
        });        
    }

//automatically fed parameter if getCurrentPosition works out
//ALSO shows nearby event positions, drops pins for them
function show_user_position(position) {
    //get needed objects
    var googlePos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    userPos = position;
    var mapOptions = {
                zoom : 16,
                center : googlePos,
                mapTypeId : google.maps.MapTypeId.ROADMAP
            };
    var mapObj = document.getElementById('mapdiv');
    googleMap = new google.maps.Map(mapObj, mapOptions);
    
    var image = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|66CD00';
    //drop user marker
    var markerOpt = {
        map : googleMap,
        position : googlePos,
        title : 'You are here',
        animation : google.maps.Animation.DROP,
	icon: image
    };
    var googleMarker = new google.maps.Marker(markerOpt);
    pins.push(googleMarker); //push to pins array
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({
        'latLng' : googlePos
        }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                var popOpts = {
                    content : results[1].formatted_address,
                    position : googlePos
                };
            var popup = new google.maps.InfoWindow(popOpts);
            google.maps.event.addListener(googleMarker, 'click', function() {
            popup.open(googleMap);
        });
            } else {
                alert('No results found');
            }
            } else {
                alert('Geocoder failed due to: ' + status);
            }
        });
    
    find_nearby_events(position.coords.latitude,position.coords.longitude)
    find_similar_events()

}

function showError(error) {
	var err = document.getElementById('mapdiv');
	switch(error.code) {
		case error.PERMISSION_DENIED:
		err.innerHTML = "User denied the request for Geolocation."
		break;
		case error.POSITION_UNAVAILABLE:
		err.innerHTML = "Location information is unavailable."
		break;
		case error.TIMEOUT:
		err.innerHTML = "The request to get user location timed out."
		break;
		case error.UNKNOWN_ERROR:
		err.innerHTML = "An unknown error occurred."
		break;
	}
}

//need to call this to place the pins, call as needed
//creates event pin based on long and latitude and drops onto map
//pushes into pin array
function drop_event_pins(events_array,pin_pic_url)
{
    var isRecommendationPin = true;
    if(typeof pin_pic_url === 'undefined'){
        pin_pic_url = "";
        isRecommendationPin = false;
    }
	for(var i = 0; i< events_array.length; i++)
	{
		var googlePos = new google.maps.LatLng(events_array[i].latitude, events_array[i].longitude);
		var markerOpt = {
				map : googleMap,
				position : googlePos,
				title : events_array[i].title,
				animation : google.maps.Animation.DROP,
	            icon: pin_pic_url
			};
		//this adds it to the map as a marker and shows it
		//to just create it, put the options into the array and then make as needed
		var googleMarker = new google.maps.Marker(markerOpt);

		//grab date information
		var date_start = events_array[i].start_time.substring(0,events_array[i].start_time.indexOf('T'));
		var date_end = events_array[i].end_time.substring(0,events_array[i].start_time.indexOf('T'));
        
        var sTime = parseTimeStr(events_array[i].start_time);
        var endTime = parseTimeStr(events_array[i].end_time);

        var info;
        if(!isRecommendationPin){
            info = '<div id="content">'+'<h1>'+ events_array[i].title + '</h1>' + '<p>'+ events_array[i].address + '<br>'+ events_array[i].description + '<br>' + ' Starts: ' + date_start + ' ' + sTime +'<br>'+ ' Ends: ' + date_end + ' ' + endTime + '<br>'+'</p><br>'+attendBtnHTML(events_array[i])+'</div>';
        }else{
            info = "We've noticed that your friends like to hang out here, maybe you will too!<br>"+events_array[i].address;
        }

		//info window
		var infowindow = new google.maps.InfoWindow({
			content: info,
            class: "content_wind"
		});
		
		//need to do this way to ensure unique info window for each marker
		google.maps.event.addListener(googleMarker,'click', (function(googleMarker,info,infowindow){ 
    			return function() {
				infowindow.setContent(info);
				infowindow.open(googleMap,googleMarker);
		    };
		})(googleMarker,info,infowindow));  

		pins.push(googleMarker); //push to pins array
	}
}
    
    
    
function parseTimeStr(timeStr){
    //grabbing times from strings
    //cut off strings and only include between the T and the end of the minutes 
    //-3 cuts off the :SS section of the time string
    var start =timeStr.substring(timeStr.indexOf('T')+1,timeStr.indexOf('.')-3);

    if(start.charAt(0) == '0')
        start = start.substring(1) + ' AM'; //cutt off the 0
    else
    {
        //double digit hours only
        //make sure that 12 pm is still pm
        var real_time = start.substring(0,start.indexOf(':'));
        if(real_time > 12 )
            real_time = real_time - 12;
        start = real_time + start.substring(2) + ' PM'; //change the hours and keep the rest 
    }
    return start
}

function attendBtnHTML(event_id){
    var attend_option;
    if(<%= current_user == nil %>){
        attend_option = "Please Log-in to attend an event"
    }else{
        //user is logged in, thus current_user will never be nil. Must check though in order for erb to compile!
        var userHostedEventIds = <%= (current_user!=nil) ? current_user.events.pluck(:id) : [] %>;
        var eventsUserIsAttendingIds = <%= (current_user!=nil) ? Attend.where(user_id:current_user.id).pluck(:event_id) : [] %>;


        if( userHostedEventIds.indexOf(event_id) > -1 ){
            attend_option = "This is your event";
        }else if(eventsUserIsAttendingIds.indexOf(event_id) > -1){
            attend_option = "You are already attending this event";
        }else{
           var action_url = '<%= create_attend_relation_events_path %>'+'?user='+
               <%= (current_user!=nil) ? current_user.id : -1 %>
               +'&event='+event_id;

           attend_option='<form class="button_to" method="post" action='+action_url+'><input type="submit" value="Attend Event" /><input type="hidden" name="authenticity_token" value="<%= form_authenticity_token %>"/></form>';

        } 
    }
    return attend_option
}
//clears all other pins from map, but does not delete them
function show_only_pin(pin)
{
	for(var i = 0; i< pins.length; i++)
	{
		if(!(pins[i] == pin))
			pins[i].setMap(googleMap);
		else
			pins[i].setMap(NULL);
	}
}

//don't do any operations on user pin (pin[0])
function show_all_pins()
{
	for (var i = 1; i < pins.length; i++) {
    		pins[i].setMap(googleMap);
  	}
}

function clear_all_pins()
{
	for (var i = 1; i < pins.length; i++) {
    		pins[i].setMap(null);
  	}
}

//deletes every pin except user
function delete_pins() {
	clear_all_pins();
	var pin_user = pins[0]; //hold the value
	pins = []; //reset array
	pins[0] = pin_user; //put back into array
}


//map movement and adjustment algorithims

//radius sent in as miles
//display markers within the radius
/*
function drop_seeable_events(events, radius)
{
	// have events array
	for(var i = 0; i<events.length; i++)
	{
		//get long and lat of each pin on the map (events)
		var eventLat=events[i].getPosition().lat();
		var eventLong=events[i].getPosition().lng();

		//LL object from google API
		var eventPos = new GLatLng(eventLat, eventLong);

		var kmDistance = userPos.distanceFrom(eventPos) / 1000.0;

		var kmRadius = radius * 2.2;		

		if(kmDistance < kmRadius){
			events[i].setMap(googleMap);
	}
}*/


//for map view
function resize_map() {

    var bounds = new google.maps.LatLngBounds();
    //iterate over pins and extend bounds by the pin
    for (var i=0; i < pins.length; i++) {
        bounds.extend(pins[i].getPosition());
    }
    googleMap.fitBounds(bounds); //fit the map to the new bounds
}


//function to grab input fields and filter pins accordingly
function grab_values() {
    var address = $("#address").val();
    var radius = $("#radius").val();
    var time = $("#time").val();
  
    //deal with tag drop down
    var selected_tag_id = $("#tag").find(":selected").val();
    find_nearby_events(userPos.coords.latitude,userPos.coords.longitude,radius,selected_tag_id,time,address);
}

</script>
