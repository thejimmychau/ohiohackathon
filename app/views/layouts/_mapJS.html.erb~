<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=true"></script> <!-- Map API dependancy -->

<!-- custom map scripts -->
<script>
    document.onload = drop_user_pin();
    
var pins = []; //array of all pins
var googleMap;
var userPos;

function drop_user_pin()
{
	//grab position if possible
	if (navigator.geolocation) {
		var optn = {
				enableHighAccuracy : true,
				timeout : Infinity,
				maximumAge : 0
		};
        
	//put position on the map
	navigator.geolocation.getCurrentPosition(show_user_position, showError, optn);
    
	} else {
			alert('Geolocation is not supported in your browser');
	}
}

//find nearby from user lat and lng
function find_nearby_events(latitude,longitude){
    var request = "/events/find_nearby_events?latitude="+latitude+"&longitude="+longitude; //access route of interest
    var aj = $.ajax({
        url: request,
        type: 'get',
        data: $(this).serialize()
    }).done(function (data) {
        drop_event_pins(data);
    }).fail(function (data) {
        console.log('AJAX request has FAILED');
    });
}

//automatically fed parameter if getCurrentPosition works out
//ALSO shows nearby event positions, drops pins for them
function show_user_position(position) {
    //get needed objects
    var googlePos = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    userPos = googlePos;
    var mapOptions = {
                zoom : 12,
                center : googlePos,
                mapTypeId : google.maps.MapTypeId.ROADMAP
            };
    var mapObj = document.getElementById('mapdiv');
    googleMap = new google.maps.Map(mapObj, mapOptions);
    
    var image = 'http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|66CD00';
    //drop user marker
    var markerOpt = {
        map : googleMap,
        position : googlePos,
        title : 'You are here',
        animation : google.maps.Animation.DROP,
	icon: image
    };
    var googleMarker = new google.maps.Marker(markerOpt);
    pins.push(googleMarker); //push to pins array
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({
        'latLng' : googlePos
        }, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
            if (results[1]) {
                var popOpts = {
                    content : results[1].formatted_address,
                    position : googlePos
                };
            var popup = new google.maps.InfoWindow(popOpts);
            google.maps.event.addListener(googleMarker, 'click', function() {
            popup.open(googleMap);
        });
            } else {
                alert('No results found');
            }
            } else {
                alert('Geocoder failed due to: ' + status);
            }
        });
    
    var events = find_nearby_events(position.coords.latitude,position.coords.longitude)
}

function showError(error) {
	var err = document.getElementById('mapdiv');
	switch(error.code) {
		case error.PERMISSION_DENIED:
		err.innerHTML = "User denied the request for Geolocation."
		break;
		case error.POSITION_UNAVAILABLE:
		err.innerHTML = "Location information is unavailable."
		break;
		case error.TIMEOUT:
		err.innerHTML = "The request to get user location timed out."
		break;
		case error.UNKNOWN_ERROR:
		err.innerHTML = "An unknown error occurred."
		break;
	}
}

//need to call this to place the pins, call as needed
//creates event pin based on long and latitude and drops onto map
//pushes into pin array
function drop_event_pins(events_array)
{
	for(var i = 0; i< events_array.length; i++)
	{
		var googlePos = new google.maps.LatLng(events_array[i].latitude, events_array[i].longitude);
		var markerOpt = {
				map : googleMap,
				position : googlePos,
				title : events_array[i].title,
				animation : google.maps.Animation.DROP
			};
		//this adds it to the map as a marker and shows it
		//to just create it, put the options into the array and then make as needed
		var googleMarker = new google.maps.Marker(markerOpt);
		pins.push(googleMarker); //push to pins array
	}	
}


//clears all other pins from map, but does not delete them
function show_only_pin(pin)
{
	for(var i = 0; i< pins.length; i++)
	{
		if(!(pins[i] == pin))
			pins[i].setMap(googleMap);
		else
			pins[i].setMap(NULL);
	}
}

function show_all_pins()
{
	for (var i = 0; i < pins.length; i++) {
    		pins[i].setMap(googleMap);
  	}
}

function clear_all_pins()
{
	for (var i = 0; i < pins.length; i++) {
    		pins[i].setMap(null);
  	}
}

function delete_pins() {
	clear_all_pins();
	pins = []; //reset array
}


//map movement and adjustment algorithims

//radius sent in as miles
//display markers within the radius
/*
function drop_seeable_events(events, radius)
{
	// have events array
	for(var i = 0; i<events.length; i++)
	{
		//get long and lat of each pin on the map (events)
		var eventLat=events[i].getPosition().lat();
		var eventLong=events[i].getPosition().lng();

		//LL object from google API
		var eventPos = new GLatLng(eventLat, eventLong);

		var kmDistance = userPos.distanceFrom(eventPos) / 1000.0;

		var kmRadius = radius * 2.2;		

		if(kmDistance < kmRadius){
			events[i].setMap(googleMap);
	}
}*/


//for map view
function resize_map() {

    var bounds = new google.maps.LatLngBounds();
    //iterate over pins and extend bounds by the pin
    for (var i=0; i < pins.length; i++) {
        bounds.extend(pins[i].getPosition());
    }
    googleMap.fitBounds(bounds); //fit the map to the new bounds
}

</script>
